{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Folder structure \u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff ApplicationHelper module The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the element of the page.","title":"Home"},{"location":"#folder-structure","text":"\u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff","title":"Folder structure"},{"location":"#applicationhelper-module","text":"The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the element of the page.","title":"ApplicationHelper module"},{"location":"controller/","text":"Folder structure \u251c\u2500\u2500\u2500controllers \u251c\u2500\u2500\u2500admin \u2502 \u251c\u2500\u2500\u2500articles | | \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500partner_categories \u2502 \u251c\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500vista_admins \u251c\u2500\u2500\u2500api \u2502 \u251c\u2500\u2500\u2500admin \u2502 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u2502 \u2514\u2500\u2500\u2500staff_members \u2502 \u251c\u2500\u2500\u2500partners \u2502 \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u2502 \u251c\u2500\u2500\u2500management \u2502 \u2502 \u2514\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500questions \u2502 \u251c\u2500\u2500\u2500sync \u2502 \u2514\u2500\u2500\u2500users \u251c\u2500\u2500\u2500concerns \u2514\u2500\u2500\u2500partners \u251c\u2500\u2500\u2500staff \u2514\u2500\u2500\u2500staff_members ApplicationController The ApplicationController is a base class for all the controllers in a Ruby on Rails application. It provides a number of common features that are useful in most controllers, such as support for flash messages and handling of exceptions. Here is a description of each part of the ApplicationController: include Pundit: This line includes the Pundit module, which provides a set of helper methods for authorization in the controller. protect_from_forgery with: :exception: This line enables protection against cross-site request forgery (CSRF) attacks. If a request is determined to be a forgery, an exception will be raised. add_flash_types :success, :error, :warning: This line adds custom flash types (e.g., :success, :error, :warning) that can be used to display flash messages to the user. layout :layout_by_resource: This line specifies a method (layout_by_resource) that will be used to determine the layout to use for the current request. devise_group :non_user, contains: %i[vista_admin staff_member]: This line specifies a group of Devise models (e.g., :vista_admin, :staff_member) that are treated as \"non-users\" for the purposes of Devise authentication. def info_for_paper_trail: This method returns a hash containing information about the current request (e.g., the IP address and user agent) that can be used by the PaperTrail gem to track changes in the application. def layout_by_resource: This method returns the name of the layout to use for the current request. If the current controller is a Devise controller, it returns 'devise', otherwise it returns 'application'. def convert_params_to_snakecase: This method converts the keys of the params hash to snakecase (e.g., 'userName' becomes 'user_name'). As the ApplicationController is a base class, it does not handle any routes or interact with any models directly. Instead, it provides common functionality that can be used by other controllers in the application. Error conditions that may be handled by the ApplicationController include CSRF attacks and other exceptions that may be raised during the handling of a request. Examples of usage for the ApplicationController might include setting flash messages or handling exceptions in controllers that inherit from it. For example: class PostsController < ApplicationController def create @post = Post.new(post_params) if @post.save flash[:success] = 'Post created successfully' redirect_to posts_path else flash[:error] = 'There was an error creating the post' render :new end end end In this example, the PostsController inherits from ApplicationController and makes use of the custom flash types (:success and :error) defined in the base class. It also utilizes the protect_from_forgery feature to protect against CSRF attacks.","title":"structure"},{"location":"controller/#folder-structure","text":"\u251c\u2500\u2500\u2500controllers \u251c\u2500\u2500\u2500admin \u2502 \u251c\u2500\u2500\u2500articles | | \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500partner_categories \u2502 \u251c\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500vista_admins \u251c\u2500\u2500\u2500api \u2502 \u251c\u2500\u2500\u2500admin \u2502 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u2502 \u2514\u2500\u2500\u2500staff_members \u2502 \u251c\u2500\u2500\u2500partners \u2502 \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u2502 \u251c\u2500\u2500\u2500management \u2502 \u2502 \u2514\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500questions \u2502 \u251c\u2500\u2500\u2500sync \u2502 \u2514\u2500\u2500\u2500users \u251c\u2500\u2500\u2500concerns \u2514\u2500\u2500\u2500partners \u251c\u2500\u2500\u2500staff \u2514\u2500\u2500\u2500staff_members","title":"Folder structure"},{"location":"controller/#applicationcontroller","text":"The ApplicationController is a base class for all the controllers in a Ruby on Rails application. It provides a number of common features that are useful in most controllers, such as support for flash messages and handling of exceptions. Here is a description of each part of the ApplicationController: include Pundit: This line includes the Pundit module, which provides a set of helper methods for authorization in the controller. protect_from_forgery with: :exception: This line enables protection against cross-site request forgery (CSRF) attacks. If a request is determined to be a forgery, an exception will be raised. add_flash_types :success, :error, :warning: This line adds custom flash types (e.g., :success, :error, :warning) that can be used to display flash messages to the user. layout :layout_by_resource: This line specifies a method (layout_by_resource) that will be used to determine the layout to use for the current request. devise_group :non_user, contains: %i[vista_admin staff_member]: This line specifies a group of Devise models (e.g., :vista_admin, :staff_member) that are treated as \"non-users\" for the purposes of Devise authentication. def info_for_paper_trail: This method returns a hash containing information about the current request (e.g., the IP address and user agent) that can be used by the PaperTrail gem to track changes in the application. def layout_by_resource: This method returns the name of the layout to use for the current request. If the current controller is a Devise controller, it returns 'devise', otherwise it returns 'application'. def convert_params_to_snakecase: This method converts the keys of the params hash to snakecase (e.g., 'userName' becomes 'user_name'). As the ApplicationController is a base class, it does not handle any routes or interact with any models directly. Instead, it provides common functionality that can be used by other controllers in the application. Error conditions that may be handled by the ApplicationController include CSRF attacks and other exceptions that may be raised during the handling of a request. Examples of usage for the ApplicationController might include setting flash messages or handling exceptions in controllers that inherit from it. For example: class PostsController < ApplicationController def create @post = Post.new(post_params) if @post.save flash[:success] = 'Post created successfully' redirect_to posts_path else flash[:error] = 'There was an error creating the post' render :new end end end In this example, the PostsController inherits from ApplicationController and makes use of the custom flash types (:success and :error) defined in the base class. It also utilizes the protect_from_forgery feature to protect against CSRF attacks.","title":"ApplicationController"},{"location":"controller/admin/","text":"","title":"Admin"},{"location":"controller/api/","text":"","title":"API"},{"location":"controller/partner/","text":"","title":"Partner"},{"location":"function/","text":"Folder structure \u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff ApplicationHelper module The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the element of the page. subdomain function Description: This function generates a URL for a given subdomain by concatenating the subdomain with the host of the application. Input parameters: subdomain (string): The subdomain to be used in the generated URL. This parameter is optional, and if it is not provided, the function will use an empty string as the subdomain. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: with_subdomain(\"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") with_subdomain(nil) # returns \"localhost\" with_subdomain(\"\") # returns \"localhost\" url_for function : Description: This function generates a URL based on the provided options. If the :subdomain option is present, it will be used to generate the URL using the with_subdomain function. Input parameters: options (hash): A hash of options to be used to generate the URL. This parameter is optional, and if it is not provided, the function will use the default options. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: url_for(subdomain: \"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") url_for(host: \"example.com\") # returns \"example.com\" url_for # returns the default URL for the application","title":"structure"},{"location":"function/#folder-structure","text":"\u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff","title":"Folder structure"},{"location":"function/#applicationhelper-module","text":"The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the element of the page.","title":"ApplicationHelper module"},{"location":"function/#subdomain-function","text":"Description: This function generates a URL for a given subdomain by concatenating the subdomain with the host of the application. Input parameters: subdomain (string): The subdomain to be used in the generated URL. This parameter is optional, and if it is not provided, the function will use an empty string as the subdomain. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: with_subdomain(\"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") with_subdomain(nil) # returns \"localhost\" with_subdomain(\"\") # returns \"localhost\" url_for function : Description: This function generates a URL based on the provided options. If the :subdomain option is present, it will be used to generate the URL using the with_subdomain function. Input parameters: options (hash): A hash of options to be used to generate the URL. This parameter is optional, and if it is not provided, the function will use the default options. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: url_for(subdomain: \"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") url_for(host: \"example.com\") # returns \"example.com\" url_for # returns the default URL for the application","title":"subdomain function"},{"location":"function/admin/","text":"Admin The following are the helper functions under the admin directory category_parent_selection function Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name. Error conditions: None. Examples of usage: category_parent_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name render_partner_categories function Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_partner_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_partner_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_partner_categories_path` URL render_categories function Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_categories_path` URL render_sortable function Description: This function renders a sortable list of items using the provided URL. Input parameters: collection (collection): A collection of items to be rendered. url (string): The URL to be used for sorting the items. Output values: A rendered list of items. Error conditions: If the collection parameter is nil or empty, the function returns nil. Examples of usage: render_sortable(Category.all, reorder_admin_categories_path) # renders a sortable list of all categories using the provided URL import_status function Description: This function returns an icon and text representing the status of a data import. Input parameters: data_import (object): An object representing a data import. The object should have a status attribute. Output values: An icon and text representing the status of the data import. Error conditions: If the data_import parameter is nil, the function returns nil. If the status attribute of the data_import object is not one of the expected values (\"new\", \"running\", \"finished\", \"failed\"), the function returns nil. Examples of usage: import_status(DataImport.first) # returns an icon and text representing the status of the first data import in the database navbar_breadcrumbs function Description: This function generates a breadcrumb navigation element with the specified options. Input parameters: None. Output values: A breadcrumb navigation element with the specified options. Error conditions: None. Examples of usage: navbar_breadcrumbs # generates a breadcrumb navigation element with the specified options category_selection function Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name. Error conditions: None. Examples of usage: category_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name release_status function Description: This function returns an icon and text representing the status of a release. Input parameters: release (object): An object representing a release. The object should have a status attribute. Output values: An icon and text representing the status of the release. Error conditions: If the release parameter is nil, the functi codeon returns nil. If the status attribute of the release object is not one of the expected values (\"queued\", \"processing\", \"complete\"), the function returns nil. Examples of usage: release_status(Release.first) # returns an icon and text representing the status of the first release in the database published_status function Description: This function returns a string indicating whether a video is published or not. Input parameters: video (object): An object representing a video. The object should have a published? method. Output values: A string indicating whether the video is published or not. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_status(Video.first) # returns a string indicating whether the first video in the database is published or not published_at function Description: This function returns a string representing the date and time at which a video was published, or \"n/a\" if the video is not published. Input parameters: video (object): An object representing a video. The object should have a published? method and a published_at attribute. Output values: A string representing the date and time at which the video was published, or \"n/a\" if the video is not published. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_at(Video.first) # returns a string representing the date and time at which the first video in the database was published, or \"n/a\" if the video is not published organisation_name function Description: This function returns the name of the organisation associated with a video, or \"Vista\" if the video is not associated with an organisation. Input parameters: video (object): An object representing a video. The object should have an organisation attribute. Output values: The name of the organisation associated with the video, or \"Vista\" if the video is not associated with an organisation. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: organisation_name(Video.first) # returns the name of the organisation associated with the first video in the database, or \"Vista\" if the video is not associated with an organisation organisation_select function Description: This function generates an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Input parameters: None. Output values: An array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Error conditions: None. Examples of usage: organisation_select # returns an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option","title":"admin"},{"location":"function/admin/#admin","text":"The following are the helper functions under the admin directory","title":"Admin"},{"location":"function/admin/#category_parent_selection-function","text":"Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name. Error conditions: None. Examples of usage: category_parent_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name","title":"category_parent_selection function"},{"location":"function/admin/#render_partner_categories-function","text":"Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_partner_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_partner_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_partner_categories_path` URL","title":"render_partner_categories function"},{"location":"function/admin/#render_categories-function","text":"Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_categories_path` URL","title":"render_categories function"},{"location":"function/admin/#render_sortable-function","text":"Description: This function renders a sortable list of items using the provided URL. Input parameters: collection (collection): A collection of items to be rendered. url (string): The URL to be used for sorting the items. Output values: A rendered list of items. Error conditions: If the collection parameter is nil or empty, the function returns nil. Examples of usage: render_sortable(Category.all, reorder_admin_categories_path) # renders a sortable list of all categories using the provided URL","title":"render_sortable function"},{"location":"function/admin/#import_status-function","text":"Description: This function returns an icon and text representing the status of a data import. Input parameters: data_import (object): An object representing a data import. The object should have a status attribute. Output values: An icon and text representing the status of the data import. Error conditions: If the data_import parameter is nil, the function returns nil. If the status attribute of the data_import object is not one of the expected values (\"new\", \"running\", \"finished\", \"failed\"), the function returns nil. Examples of usage: import_status(DataImport.first) # returns an icon and text representing the status of the first data import in the database","title":"import_status function"},{"location":"function/admin/#navbar_breadcrumbs-function","text":"Description: This function generates a breadcrumb navigation element with the specified options. Input parameters: None. Output values: A breadcrumb navigation element with the specified options. Error conditions: None. Examples of usage: navbar_breadcrumbs # generates a breadcrumb navigation element with the specified options","title":"navbar_breadcrumbs function"},{"location":"function/admin/#category_selection-function","text":"Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name. Error conditions: None. Examples of usage: category_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name","title":"category_selection function"},{"location":"function/admin/#release_status-function","text":"Description: This function returns an icon and text representing the status of a release. Input parameters: release (object): An object representing a release. The object should have a status attribute. Output values: An icon and text representing the status of the release. Error conditions: If the release parameter is nil, the functi codeon returns nil. If the status attribute of the release object is not one of the expected values (\"queued\", \"processing\", \"complete\"), the function returns nil. Examples of usage: release_status(Release.first) # returns an icon and text representing the status of the first release in the database","title":"release_status function"},{"location":"function/admin/#published_status-function","text":"Description: This function returns a string indicating whether a video is published or not. Input parameters: video (object): An object representing a video. The object should have a published? method. Output values: A string indicating whether the video is published or not. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_status(Video.first) # returns a string indicating whether the first video in the database is published or not","title":"published_status function"},{"location":"function/admin/#published_at-function","text":"Description: This function returns a string representing the date and time at which a video was published, or \"n/a\" if the video is not published. Input parameters: video (object): An object representing a video. The object should have a published? method and a published_at attribute. Output values: A string representing the date and time at which the video was published, or \"n/a\" if the video is not published. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_at(Video.first) # returns a string representing the date and time at which the first video in the database was published, or \"n/a\" if the video is not published","title":"published_at function"},{"location":"function/admin/#organisation_name-function","text":"Description: This function returns the name of the organisation associated with a video, or \"Vista\" if the video is not associated with an organisation. Input parameters: video (object): An object representing a video. The object should have an organisation attribute. Output values: The name of the organisation associated with the video, or \"Vista\" if the video is not associated with an organisation. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: organisation_name(Video.first) # returns the name of the organisation associated with the first video in the database, or \"Vista\" if the video is not associated with an organisation","title":"organisation_name function"},{"location":"function/admin/#organisation_select-function","text":"Description: This function generates an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Input parameters: None. Output values: An array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Error conditions: None. Examples of usage: organisation_select # returns an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option","title":"organisation_select function"},{"location":"function/partner/","text":"Partners The following are the helper functions under the partners directory business_units_for_select function : Description: This function returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Input parameters: None. Output values: The business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Error conditions: If the current_organisation or current_staff_member objects are nil, the function returns nil. Examples of usage: business_units_for_select # returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin preference_groups_json function : Description: This function generates a JSON array of preference groups, including their IDs, titles, and the titles of their questions. Input parameters: preference_groups (collection): A collection of preference group objects. Output values: A JSON array of preference groups, including their IDs, titles, and the titles of their questions. Error conditions: If the preference_groups parameter is `nil","title":"partners"},{"location":"function/partner/#partners","text":"The following are the helper functions under the partners directory","title":"Partners"},{"location":"function/partner/#business_units_for_select-function","text":"Description: This function returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Input parameters: None. Output values: The business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Error conditions: If the current_organisation or current_staff_member objects are nil, the function returns nil. Examples of usage: business_units_for_select # returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin","title":"business_units_for_select function:"},{"location":"function/partner/#preference_groups_json-function","text":"Description: This function generates a JSON array of preference groups, including their IDs, titles, and the titles of their questions. Input parameters: preference_groups (collection): A collection of preference group objects. Output values: A JSON array of preference groups, including their IDs, titles, and the titles of their questions. Error conditions: If the preference_groups parameter is `nil","title":"preference_groups_json function:"},{"location":"models/","text":"Models Folder structure \u251c\u2500\u2500\u2500models \u251c\u2500\u2500\u2500concerns \u251c\u2500\u2500\u2500personality \u2514\u2500\u2500\u2500versions Address The Address model represents an address in the system. It has the following attributes: id (integer): a unique ID for the address label (string): a label or nickname for the address line1 (string): the first line of the address line2 (string): the second line of the address town (string): the town or city where the address is located county (string): the county or region where the address is located postcode (string): the postal code for the address country (string): the country where the address is located phone (string): a phone number associated with the address latitude (decimal): the latitude of the address longitude (decimal): the longitude of the address addressable_type (string): the type of model that the address belongs to** (e.g. \"User\" or \"Company\") addressable_id (integer): the ID of the model that the address belongs to created_at (datetime): the date and time that the address was created updated_at (datetime): the date and time that the address was last updated city_id (integer): the ID of the city where the address is located The Address model has the following relationships: belongs_to :addressable, polymorphic: true: this indicates that the address belongs to a parent model, and the addressable_type and addressable_id attributes are used to specify which model the address belongs to. The polymorphic option indicates that the parent model can be any type of model, and the inverse_of: :address option specifies the name of the has_one or has_many association on the parent model. belongs_to :city: this indicates that the address belongs to a city. The city_id attribute is used to specify which city the address belongs to. The Address model has the following custom methods: country_name: this method returns the name of the country for the address. It uses the ISO3166 gem to look up the name of the country based on the country attribute. country_code: this method returns the country code for the address. It simply returns the value of the country attribute. Here are some examples of how the Address model might be used: # Find all addresses for a user user = User.find(123) addresses = user.addresses # Find the nearest address to a given location latitude = 37.774929 longitude = -122.419416 radius = 5 # miles addresses = Address.within(radius, origin: [latitude, longitude]) # Find the address for a specific user user = User.find(123) address = user.address # Set the address for a user user = User.find(123) Admin The following are the Attributes of Admin: id : bigint, primary key for the model email : string, the email address of the admin first_name : string, the first name of the admin last_name : string, the last name of the admin mobile_number : string, the mobile phone number of the admin encrypted_password : string, a hashed version of the admin's password reset_password_token : string, a token used for resetting the admin's password reset_password_sent_at : datetime, the time at which the reset password token was sent remember_created_at : datetime, the time at which the admin selected the \"remember me\" option during login sign_in_count : integer, the number of times the admin has signed in current_sign_in_at : datetime, the time at which the admin signed in during the current session last_sign_in_at : datetime, the time at which the admin signed in during the previous session current_sign_in_ip : inet, the IP address of the admin during the current session last_sign_in_ip : inet, the IP address of the admin during the previous session authentication_token : string, a token used for authenticating the admin created_at : datetime, the time at which the admin's record was created updated_at : datetime, the time at which the admin's record was last updated organisation_id : bigint, the ID of the organization to which the admin belongs type : string, the type of staff member (in this case, \"Admin\") employee_id : string, the employee ID of the admin confirmation_token : string, a token used for confirming the admin's email address confirmed_at : datetime, the time at which the admin's email address was confirmed confirmation_sent_at : datetime, the time at which the confirmation token was sent suspended_at : datetime, the time at which the admin's access was suspended archived_at : datetime, the time at which the admin's record was archived encrypted_pin : string, a hashed version of the admin's PIN (personal identification number) unconfirmed_email : string, the unconfirmed email address of the admin (if the admin has requested a change to their email address) Inherits from StaffMember model Custom methods: None Examples of usage: An instance of the Admin model could represent a staff member with administrative privileges within an organization. The email, password, and authentication token attributes could be used for authenticating the admin when logging in to the system. The sign_in_count, current_sign_in_at, and last_sign_in_at attributes could be used for tracking the admin's login history. Answer Attributes: id (integer): The primary key for the model. question_id (integer): The ID of the question that the answer belongs to. title (text): The title of the answer. description (text): A description of the answer. created_at (datetime): The timestamp for when the answer was created. updated_at (datetime): The timestamp for when the answer was last updated. position (integer): The position of the answer within its parent question. Relationships: question (belongs_to): The question that the answer belongs to. photo (has_one): The photo associated with the answer. Custom methods: siblings : Returns the other answers within the same question as the current answer. reject_photo? : Determines whether a photo should be rejected when creating or updating an answer. set_position : Sets the position of the answer within its parent question. Examples of usage: # Create a new answer with a title and description answer = Answer.new(title: 'Yes', description: 'The answer is yes') # Set the question that the answer belongs to answer.question = Question.first # Save the answer answer.save # Update the title of the answer answer.title = 'Yes, definitely' answer.save # Delete the answer answer.destroy ApplicationRecord Attributes: None. ApplicationRecord is an abstract base class and does not have any attributes of its own. Relationships: None. ApplicationRecord is an abstract base class and does not have any relationships of its own. Custom methods: updated_since(datetime): Returns all records that have been updated since the specified datetime. pluck_to_hash(*keys): Returns an array of hashes, where each hash represents a record in the database with keys corresponding to the specified attributes. Examples of usage: # Find all records in the database that have been updated since yesterday ApplicationRecord.updated_since(1.day.ago) # Retrieve the IDs and titles of all records in the database ApplicationRecord.pluck_to_hash(:id, :title) Note: ApplicationRecord is an abstract base class and cannot be instantiated directly. Instead, you will need to use a concrete subclass of ApplicationRecord (such as Answer, Question, etc.) to create and manipulate records in the database. ArticleContentCategory Attributes: id (integer): The primary key for the model. article_id (integer): The ID of the article that the content category belongs to. content_category_id (integer): The ID of the content category. created_at (datetime): The timestamp for when the article content category was created. updated_at (datetime): The timestamp for when the article content category was last updated. Relationships: article (belongs_to): The article that the content category belongs to. content_category (belongs_to): The content category. Custom methods: None. Examples of usage: # Create a new article content category article_content_category = ArticleContentCategory.new # Set the article and content category that the article content category belongs to article_content_category.article = Article.first article_content_category.content_category = ContentCategory.first # Save the article content category article_content_category.save # Delete the article content category article_content_category.destroy Article Attributes: id (integer): The primary key for the model. title (string): The title of the article. content (text): The content of the article. publish_at (datetime): The timestamp for when the article should be published. created_at (datetime): The timestamp for when the article was created. updated_at (datetime): The timestamp for when the article was last updated. notification_job_id (integer): The ID of the job used to send notifications when the article is published. Relationships: header_image (has_one): The header image for the article. photos (has_many): The photos associated with the article. article_content_categories (has_many): The article content categories associated with the article. content_categories (has_many): The content categories associated with the article. Custom methods: header_image=(header_image) : Sets the header image for the article. publish_at=(publish_at) : Sets the publish timestamp for the article. published? : Returns true if the article has been published, false otherwise. status : Returns the current status of the article. self.start_draft : Creates a new draft article. Examples of usage: # Create a new article article = Article.new # Set the title and content of the article article.title = 'My article' article.content = 'This is the content of my article' # Set the publish timestamp for the article article.publish_at = 1.day.from_now # Save the article article.save # Check if the article has been published article.published? # Get the status of the article article.status # Delete the article article.destroy AuthenticationToken The AuthenticationToken model represents a token that is used to authenticate a user. It belongs to a polymorphic user, which means that it can belong to any model that includes the User module. Attributes: id : a unique identifier for the token (integer, primary key) context : the context in which the token is used (string) body : the actual token (string) user_type : the type of the user that the token belongs to (string) user_id : the ID of the user that the token belongs to (integer) last_used_at : the last time the token was used (datetime) ip_address : the IP address from which the token was last used (inet) user_agent : the user agent string from the device that used the token last (string) created_at : the time the token was created (datetime) updated_at : the time the token was last updated (datetime) Relationships: user : the user that the token belongs to (polymorphic association) Custom methods: decode : decodes a token from the headers find_for_context : finds a token for a given context and token body create_and_return_staff_token : creates a new staff token and returns it create_and_return_manager_token : creates a new manager token and returns it create_and_return_token : creates a new token for a given context and returns it create_and_return_analytics_token : creates and returns an analytics token Examples of usage: To create a new staff token for a user: token = AuthenticationToken.create_and_return_staff_token(current_user, request) To find a token for a given context and token body: token = AuthenticationToken.find_for BranchCategorisation The BranchCategorisation model represents the many-to-many relationship between branches and partner categories. This allows a branch to be associated with one or more partner categories, and a partner category to be associated with one or more branches. Attributes: id : A unique identifier for the branch categorisation record, stored as an integer and generated automatically by the database. branch_id : The ID of the branch that is associated with a partner category, stored as an integer. partner_category_id : The ID of the partner category that is associated with a branch, stored as an integer. created_at : A timestamp indicating when the branch categorisation record was created, stored as a datetime. updated_at : A timestamp indicating when the branch categorisation record was last updated, stored as a datetime. Relationships: belongs_to : A branch categorisation belongs to a single branch and a single partner category. branch : This relationship specifies the branch that is associated with a partner category. partner_category : This relationship specifies the partner category that is associated with a branch. Custom methods: There are no custom methods defined for the BranchCategorisation model. Examples of usage: Creating a new branch categorisation: branch = Branch.first partner_category = PartnerCategory.first branch_categorisation = BranchCategorisation.new(branch: branch, partner_category: partner_category) branch_categorisation.save Retrieving all branch categorisations for a particular branch: branch = Branch.first branch_categorisations = branch.branch_categorisations Retrieving all branches that belong to a particular partner category: partner_category = PartnerCategory.first branches = partner_category.branches Removing a branch categorisation: branch_categorisation = BranchCategorisation.first branch_categorisation.destroy BranchManager The BranchManager model is a subclass of the StaffMember model and represents a staff member who is a branch manager at an organisation. attributes: id : a bigint that serves as the primary key for the model email : a string that stores the email address of the staff member first_name : a string that stores the first name of the staff member last_name : a string that stores the last name of the staff member mobile_number : a string that stores the mobile phone number of the staff member encrypted_password : a string that stores the encrypted password of the staff member reset_password_token : a string that stores a token used to reset the staff member's password reset_password_sent_at : a datetime that stores the time at which the reset password token was sent to the staff member remember_created_at : a datetime that stores the time at which the staff member requested to be remembered on the device they are using sign_in_count : an integer that stores the number of times the staff member has signed in current_sign_in_at : a datetime that stores the time at which the staff member last signed in last_sign_in_at : a datetime that stores the time at which the staff member signed in before the last time they signed in current_sign_in_ip : an inet data type that stores the IP address the staff member is currently signed in from last_sign_in_ip : an inet data type that stores the IP address the staff member last signed in from authentication_token : a string that stores a unique token used for authentication purposes created_at : a datetime that stores the time at which the staff Relationships: BranchManager has a one-to-many relationship with Branch through the branches association. Custom methods: assigned_branches: returns a collection of branches that the branch manager is assigned to. Examples of usage: # Find a branch manager by their email and assign them to a branch manager = BranchManager.find_by(email: 'branch_manager@example.com') branch = Branch.find(1) manager.branches << branch # Find all the branches that a branch manager is assigned to manager = BranchManager.find(1) manager.assigned_branches Branch Attributes: **id: integer, primary key **business_unit_id: integer **name: string **created_at: datetime **updated_at: datetime **email: string **telephone: string **archived_at: datetime **image: string **branch_info: string **booking_url: string **vista_partner: boolean, default: false **ratings_count: integer, default: 0 Relationships: business_unit: belongs to a BusinessUnit organisation: has one Organisation through the BusinessUnit photo: has one Photo as owner address: has one Address as addressable staff_assignments: has many StaffAssignments as target staff_members: has many StaffMembers through StaffAssignments shares: has many Shares users: has many Users through Shares with the condition that the Share is authorised branch_categorisations: has many BranchCategorisations categories: has many PartnerCategories through BranchCategorisations interactions: has many Interactions roles: has many Roles through the BusinessUnit check_ins: has many CheckIns member_requests: has many MemberRequests member_request_messages: has many MemberRequestMessages as messageable Custom methods: category_titles: returns an array of the titles of the categories associated with the branch destroy_staff: destroys the staff members associated with the branch BusinessUnit Attributes: id : integer, primary key name : string organisation_id : integer, foreign key to the organisations table created_at : datetime updated_at : datetime archived_at : datetime Relationships: belongs_to :organisation has_many :branches has_many :roles has_many :member_request_types Custom methods: None Examples of usage: Fetch all business units belonging to a particular organisation: organisation = Organisation.find(1) business_units = organisation.business_units Fetch all branches belonging to a particular business unit: business_unit = BusinessUnit.find(1) branches = business_unit.branches Fetch all roles belonging to a particular business unit: business_unit = BusinessUnit.find(1) roles = business_unit.roles Fetch all member request types belonging to a particular business unit: business_unit = BusinessUnit.find(1) member_request_types = business_unit.member_request_types CategoryUpdate Attributes: id : integer category_id : integer question_ids : array of integers created_at : datetime updated_at : datetime Relationships: belongs_to :category Custom methods : title : returns the title of the associated category photo : returns the photo of the associated category questions : returns an array of Question objects that have an id in the question_ids attribute Examples of usage: Find the category update with id 1 update = CategoryUpdate.find(1) Access the title of the associated category update.title Access the photo of the associated category update.photo Access the questions associated with this update update.questions Category CheckIn City ContentCategory DataImport Device Feed Ignore Interaction MemberRequestMessage MemberRequestTypeAssignment MemberRequestType MemberRequest Notification Organisation PartnerCategory Personality Photo PreferenceGroup ProfileRequest Question Rating Release RoleAssignment RolePreferenceGroupAssignment Role Share StaffAssignment StaffMember TopQuestion UserAnswer User VideoContentCategory Video VistaAdmin","title":"structure"},{"location":"models/#models","text":"","title":"Models"},{"location":"models/#folder-structure","text":"\u251c\u2500\u2500\u2500models \u251c\u2500\u2500\u2500concerns \u251c\u2500\u2500\u2500personality \u2514\u2500\u2500\u2500versions","title":"Folder structure"},{"location":"models/#address","text":"The Address model represents an address in the system. It has the following attributes: id (integer): a unique ID for the address label (string): a label or nickname for the address line1 (string): the first line of the address line2 (string): the second line of the address town (string): the town or city where the address is located county (string): the county or region where the address is located postcode (string): the postal code for the address country (string): the country where the address is located phone (string): a phone number associated with the address latitude (decimal): the latitude of the address longitude (decimal): the longitude of the address addressable_type (string): the type of model that the address belongs to** (e.g. \"User\" or \"Company\") addressable_id (integer): the ID of the model that the address belongs to created_at (datetime): the date and time that the address was created updated_at (datetime): the date and time that the address was last updated city_id (integer): the ID of the city where the address is located The Address model has the following relationships: belongs_to :addressable, polymorphic: true: this indicates that the address belongs to a parent model, and the addressable_type and addressable_id attributes are used to specify which model the address belongs to. The polymorphic option indicates that the parent model can be any type of model, and the inverse_of: :address option specifies the name of the has_one or has_many association on the parent model. belongs_to :city: this indicates that the address belongs to a city. The city_id attribute is used to specify which city the address belongs to. The Address model has the following custom methods: country_name: this method returns the name of the country for the address. It uses the ISO3166 gem to look up the name of the country based on the country attribute. country_code: this method returns the country code for the address. It simply returns the value of the country attribute. Here are some examples of how the Address model might be used: # Find all addresses for a user user = User.find(123) addresses = user.addresses # Find the nearest address to a given location latitude = 37.774929 longitude = -122.419416 radius = 5 # miles addresses = Address.within(radius, origin: [latitude, longitude]) # Find the address for a specific user user = User.find(123) address = user.address # Set the address for a user user = User.find(123)","title":"Address"},{"location":"models/#admin","text":"The following are the Attributes of Admin: id : bigint, primary key for the model email : string, the email address of the admin first_name : string, the first name of the admin last_name : string, the last name of the admin mobile_number : string, the mobile phone number of the admin encrypted_password : string, a hashed version of the admin's password reset_password_token : string, a token used for resetting the admin's password reset_password_sent_at : datetime, the time at which the reset password token was sent remember_created_at : datetime, the time at which the admin selected the \"remember me\" option during login sign_in_count : integer, the number of times the admin has signed in current_sign_in_at : datetime, the time at which the admin signed in during the current session last_sign_in_at : datetime, the time at which the admin signed in during the previous session current_sign_in_ip : inet, the IP address of the admin during the current session last_sign_in_ip : inet, the IP address of the admin during the previous session authentication_token : string, a token used for authenticating the admin created_at : datetime, the time at which the admin's record was created updated_at : datetime, the time at which the admin's record was last updated organisation_id : bigint, the ID of the organization to which the admin belongs type : string, the type of staff member (in this case, \"Admin\") employee_id : string, the employee ID of the admin confirmation_token : string, a token used for confirming the admin's email address confirmed_at : datetime, the time at which the admin's email address was confirmed confirmation_sent_at : datetime, the time at which the confirmation token was sent suspended_at : datetime, the time at which the admin's access was suspended archived_at : datetime, the time at which the admin's record was archived encrypted_pin : string, a hashed version of the admin's PIN (personal identification number) unconfirmed_email : string, the unconfirmed email address of the admin (if the admin has requested a change to their email address) Inherits from StaffMember model Custom methods: None Examples of usage: An instance of the Admin model could represent a staff member with administrative privileges within an organization. The email, password, and authentication token attributes could be used for authenticating the admin when logging in to the system. The sign_in_count, current_sign_in_at, and last_sign_in_at attributes could be used for tracking the admin's login history.","title":"Admin"},{"location":"models/#answer","text":"Attributes: id (integer): The primary key for the model. question_id (integer): The ID of the question that the answer belongs to. title (text): The title of the answer. description (text): A description of the answer. created_at (datetime): The timestamp for when the answer was created. updated_at (datetime): The timestamp for when the answer was last updated. position (integer): The position of the answer within its parent question. Relationships: question (belongs_to): The question that the answer belongs to. photo (has_one): The photo associated with the answer. Custom methods: siblings : Returns the other answers within the same question as the current answer. reject_photo? : Determines whether a photo should be rejected when creating or updating an answer. set_position : Sets the position of the answer within its parent question. Examples of usage: # Create a new answer with a title and description answer = Answer.new(title: 'Yes', description: 'The answer is yes') # Set the question that the answer belongs to answer.question = Question.first # Save the answer answer.save # Update the title of the answer answer.title = 'Yes, definitely' answer.save # Delete the answer answer.destroy","title":"Answer"},{"location":"models/#applicationrecord","text":"Attributes: None. ApplicationRecord is an abstract base class and does not have any attributes of its own. Relationships: None. ApplicationRecord is an abstract base class and does not have any relationships of its own. Custom methods: updated_since(datetime): Returns all records that have been updated since the specified datetime. pluck_to_hash(*keys): Returns an array of hashes, where each hash represents a record in the database with keys corresponding to the specified attributes. Examples of usage: # Find all records in the database that have been updated since yesterday ApplicationRecord.updated_since(1.day.ago) # Retrieve the IDs and titles of all records in the database ApplicationRecord.pluck_to_hash(:id, :title) Note: ApplicationRecord is an abstract base class and cannot be instantiated directly. Instead, you will need to use a concrete subclass of ApplicationRecord (such as Answer, Question, etc.) to create and manipulate records in the database.","title":"ApplicationRecord"},{"location":"models/#articlecontentcategory","text":"Attributes: id (integer): The primary key for the model. article_id (integer): The ID of the article that the content category belongs to. content_category_id (integer): The ID of the content category. created_at (datetime): The timestamp for when the article content category was created. updated_at (datetime): The timestamp for when the article content category was last updated. Relationships: article (belongs_to): The article that the content category belongs to. content_category (belongs_to): The content category. Custom methods: None. Examples of usage: # Create a new article content category article_content_category = ArticleContentCategory.new # Set the article and content category that the article content category belongs to article_content_category.article = Article.first article_content_category.content_category = ContentCategory.first # Save the article content category article_content_category.save # Delete the article content category article_content_category.destroy","title":"ArticleContentCategory"},{"location":"models/#article","text":"Attributes: id (integer): The primary key for the model. title (string): The title of the article. content (text): The content of the article. publish_at (datetime): The timestamp for when the article should be published. created_at (datetime): The timestamp for when the article was created. updated_at (datetime): The timestamp for when the article was last updated. notification_job_id (integer): The ID of the job used to send notifications when the article is published. Relationships: header_image (has_one): The header image for the article. photos (has_many): The photos associated with the article. article_content_categories (has_many): The article content categories associated with the article. content_categories (has_many): The content categories associated with the article. Custom methods: header_image=(header_image) : Sets the header image for the article. publish_at=(publish_at) : Sets the publish timestamp for the article. published? : Returns true if the article has been published, false otherwise. status : Returns the current status of the article. self.start_draft : Creates a new draft article. Examples of usage: # Create a new article article = Article.new # Set the title and content of the article article.title = 'My article' article.content = 'This is the content of my article' # Set the publish timestamp for the article article.publish_at = 1.day.from_now # Save the article article.save # Check if the article has been published article.published? # Get the status of the article article.status # Delete the article article.destroy","title":"Article"},{"location":"models/#authenticationtoken","text":"The AuthenticationToken model represents a token that is used to authenticate a user. It belongs to a polymorphic user, which means that it can belong to any model that includes the User module. Attributes: id : a unique identifier for the token (integer, primary key) context : the context in which the token is used (string) body : the actual token (string) user_type : the type of the user that the token belongs to (string) user_id : the ID of the user that the token belongs to (integer) last_used_at : the last time the token was used (datetime) ip_address : the IP address from which the token was last used (inet) user_agent : the user agent string from the device that used the token last (string) created_at : the time the token was created (datetime) updated_at : the time the token was last updated (datetime) Relationships: user : the user that the token belongs to (polymorphic association) Custom methods: decode : decodes a token from the headers find_for_context : finds a token for a given context and token body create_and_return_staff_token : creates a new staff token and returns it create_and_return_manager_token : creates a new manager token and returns it create_and_return_token : creates a new token for a given context and returns it create_and_return_analytics_token : creates and returns an analytics token Examples of usage: To create a new staff token for a user: token = AuthenticationToken.create_and_return_staff_token(current_user, request) To find a token for a given context and token body: token = AuthenticationToken.find_for","title":"AuthenticationToken"},{"location":"models/#branchcategorisation","text":"The BranchCategorisation model represents the many-to-many relationship between branches and partner categories. This allows a branch to be associated with one or more partner categories, and a partner category to be associated with one or more branches. Attributes: id : A unique identifier for the branch categorisation record, stored as an integer and generated automatically by the database. branch_id : The ID of the branch that is associated with a partner category, stored as an integer. partner_category_id : The ID of the partner category that is associated with a branch, stored as an integer. created_at : A timestamp indicating when the branch categorisation record was created, stored as a datetime. updated_at : A timestamp indicating when the branch categorisation record was last updated, stored as a datetime. Relationships: belongs_to : A branch categorisation belongs to a single branch and a single partner category. branch : This relationship specifies the branch that is associated with a partner category. partner_category : This relationship specifies the partner category that is associated with a branch. Custom methods: There are no custom methods defined for the BranchCategorisation model. Examples of usage: Creating a new branch categorisation: branch = Branch.first partner_category = PartnerCategory.first branch_categorisation = BranchCategorisation.new(branch: branch, partner_category: partner_category) branch_categorisation.save Retrieving all branch categorisations for a particular branch: branch = Branch.first branch_categorisations = branch.branch_categorisations Retrieving all branches that belong to a particular partner category: partner_category = PartnerCategory.first branches = partner_category.branches Removing a branch categorisation: branch_categorisation = BranchCategorisation.first branch_categorisation.destroy","title":"BranchCategorisation"},{"location":"models/#branchmanager","text":"The BranchManager model is a subclass of the StaffMember model and represents a staff member who is a branch manager at an organisation. attributes: id : a bigint that serves as the primary key for the model email : a string that stores the email address of the staff member first_name : a string that stores the first name of the staff member last_name : a string that stores the last name of the staff member mobile_number : a string that stores the mobile phone number of the staff member encrypted_password : a string that stores the encrypted password of the staff member reset_password_token : a string that stores a token used to reset the staff member's password reset_password_sent_at : a datetime that stores the time at which the reset password token was sent to the staff member remember_created_at : a datetime that stores the time at which the staff member requested to be remembered on the device they are using sign_in_count : an integer that stores the number of times the staff member has signed in current_sign_in_at : a datetime that stores the time at which the staff member last signed in last_sign_in_at : a datetime that stores the time at which the staff member signed in before the last time they signed in current_sign_in_ip : an inet data type that stores the IP address the staff member is currently signed in from last_sign_in_ip : an inet data type that stores the IP address the staff member last signed in from authentication_token : a string that stores a unique token used for authentication purposes created_at : a datetime that stores the time at which the staff Relationships: BranchManager has a one-to-many relationship with Branch through the branches association. Custom methods: assigned_branches: returns a collection of branches that the branch manager is assigned to. Examples of usage: # Find a branch manager by their email and assign them to a branch manager = BranchManager.find_by(email: 'branch_manager@example.com') branch = Branch.find(1) manager.branches << branch # Find all the branches that a branch manager is assigned to manager = BranchManager.find(1) manager.assigned_branches","title":"BranchManager"},{"location":"models/#branch","text":"Attributes: **id: integer, primary key **business_unit_id: integer **name: string **created_at: datetime **updated_at: datetime **email: string **telephone: string **archived_at: datetime **image: string **branch_info: string **booking_url: string **vista_partner: boolean, default: false **ratings_count: integer, default: 0 Relationships: business_unit: belongs to a BusinessUnit organisation: has one Organisation through the BusinessUnit photo: has one Photo as owner address: has one Address as addressable staff_assignments: has many StaffAssignments as target staff_members: has many StaffMembers through StaffAssignments shares: has many Shares users: has many Users through Shares with the condition that the Share is authorised branch_categorisations: has many BranchCategorisations categories: has many PartnerCategories through BranchCategorisations interactions: has many Interactions roles: has many Roles through the BusinessUnit check_ins: has many CheckIns member_requests: has many MemberRequests member_request_messages: has many MemberRequestMessages as messageable Custom methods: category_titles: returns an array of the titles of the categories associated with the branch destroy_staff: destroys the staff members associated with the branch","title":"Branch"},{"location":"models/#businessunit","text":"Attributes: id : integer, primary key name : string organisation_id : integer, foreign key to the organisations table created_at : datetime updated_at : datetime archived_at : datetime Relationships: belongs_to :organisation has_many :branches has_many :roles has_many :member_request_types Custom methods: None Examples of usage: Fetch all business units belonging to a particular organisation: organisation = Organisation.find(1) business_units = organisation.business_units Fetch all branches belonging to a particular business unit: business_unit = BusinessUnit.find(1) branches = business_unit.branches Fetch all roles belonging to a particular business unit: business_unit = BusinessUnit.find(1) roles = business_unit.roles Fetch all member request types belonging to a particular business unit: business_unit = BusinessUnit.find(1) member_request_types = business_unit.member_request_types","title":"BusinessUnit"},{"location":"models/#categoryupdate","text":"Attributes: id : integer category_id : integer question_ids : array of integers created_at : datetime updated_at : datetime Relationships: belongs_to :category Custom methods : title : returns the title of the associated category photo : returns the photo of the associated category questions : returns an array of Question objects that have an id in the question_ids attribute Examples of usage: Find the category update with id 1 update = CategoryUpdate.find(1) Access the title of the associated category update.title Access the photo of the associated category update.photo Access the questions associated with this update update.questions","title":"CategoryUpdate"},{"location":"models/#category","text":"","title":"Category"},{"location":"models/#checkin","text":"","title":"CheckIn"},{"location":"models/#city","text":"","title":"City"},{"location":"models/#contentcategory","text":"","title":"ContentCategory"},{"location":"models/#dataimport","text":"","title":"DataImport"},{"location":"models/#device","text":"","title":"Device"},{"location":"models/#feed","text":"","title":"Feed"},{"location":"models/#ignore","text":"","title":"Ignore"},{"location":"models/#interaction","text":"","title":"Interaction"},{"location":"models/#memberrequestmessage","text":"","title":"MemberRequestMessage"},{"location":"models/#memberrequesttypeassignment","text":"","title":"MemberRequestTypeAssignment"},{"location":"models/#memberrequesttype","text":"","title":"MemberRequestType"},{"location":"models/#memberrequest","text":"","title":"MemberRequest"},{"location":"models/#notification","text":"","title":"Notification"},{"location":"models/#organisation","text":"","title":"Organisation"},{"location":"models/#partnercategory","text":"","title":"PartnerCategory"},{"location":"models/#personality","text":"","title":"Personality"},{"location":"models/#photo","text":"","title":"Photo"},{"location":"models/#preferencegroup","text":"","title":"PreferenceGroup"},{"location":"models/#profilerequest","text":"","title":"ProfileRequest"},{"location":"models/#question","text":"","title":"Question"},{"location":"models/#rating","text":"","title":"Rating"},{"location":"models/#release","text":"","title":"Release"},{"location":"models/#roleassignment","text":"","title":"RoleAssignment"},{"location":"models/#rolepreferencegroupassignment","text":"","title":"RolePreferenceGroupAssignment"},{"location":"models/#role","text":"","title":"Role"},{"location":"models/#share","text":"","title":"Share"},{"location":"models/#staffassignment","text":"","title":"StaffAssignment"},{"location":"models/#staffmember","text":"","title":"StaffMember"},{"location":"models/#topquestion","text":"","title":"TopQuestion"},{"location":"models/#useranswer","text":"","title":"UserAnswer"},{"location":"models/#user","text":"","title":"User"},{"location":"models/#videocontentcategory","text":"","title":"VideoContentCategory"},{"location":"models/#video","text":"","title":"Video"},{"location":"models/#vistaadmin","text":"","title":"VistaAdmin"},{"location":"models/concern/","text":"","title":"concerns"},{"location":"models/personality/","text":"","title":"personality"},{"location":"models/version/","text":"","title":"version"},{"location":"route/","text":"API POST /v1/login Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"chris@kanso.io\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"5f2469bc79d1ccf2cb0554ccf3314e3c\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4014520d-7732-4bf3-8d42-8f31a1b2e3ec X-Runtime: 0.175549 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"<auth token>\",\"needsOnboarding\":false} POST /v1/register Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"kathy.villeda@example.com\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"d37626fa2db73f508eb6fb5c7ce71ca3\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e7e24330-beac-48e4-abdb-3378d76fb214 X-Runtime: 0.362156 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"z89byAP37vpiouiZsPiAVmux\",\"needsOnboarding\":true} POST /v1/register Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"test@test.com\", \"password\": \"password\" } Response 401 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 069b4a52-b0a1-4b57-831e-b1ff14ceef44 X-Runtime: 0.623524 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"source\":{\"pointer\":\"/data/attributes/email\"},\"detail\":\"Email is already taken\"}]} GET /v1/me Request (application/json) Headers Accept: application/json Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.082517 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: fddcffef-bf97-43be-b16e-e143a19c2898 X-Content-Type-Options: nosniff Etag: W/\"e4675e989b64cd71d9e119f2d28a33cd\" X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 10 Oct 2017 13:45:05 GMT Body {\"id\":2,\"email\":\"chris@kanso.io\",\"firstName\":\"Chris\",\"lastName\":\"Edwards\",\"name\":\"Chris Edwards\",\"jobTitle\":\"null\",\"company\":\"null\",\"address\":\"null\",\"memberId\":\"DnMZrZ\",\"updatedAt\":\"2017-10-10T13:45:05.089Z\",\"avatar\":{\"id\":54,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/large_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=0d33cb46c3b0a49e1a1ab80097a8a84bff20149afdd39aa40256453b7035c502\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/medium_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=ab95bbbb0e5b94ea3d8ca803f33bb1ba9e4e2e4ea778f80d41921131c3053051\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/square_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=17479710095e896416fc016cff48cf1adb0b3b5123ffc629813b5de922d872c1\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/thumb_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=797ae5b7d962b92571213aeced23aca81d219d9dc55a4e47c4248b349ae1a82f\"}} PUT /v1/me Request (application/x-www-form-urlencoded; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body user%5Bname%5D=Chris+Edwards GET /v1/partners Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.240713 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 1519535a-24fc-4c8e-ab36-f7fba864b551 X-Content-Type-Options: nosniff Etag: W/\"9b185923d3c6d3ae7d173461a960d9f0\" X-Frame-Options: SAMEORIGIN Body [{\"id\":1,\"name\":\"Park Hyatt New York\",\"about\":\"Across the street from Carnegie Hall, this sleek hotel in Midtown is a minute's walk from 57th Street subway station and a mile from the Lincoln Centre\",\"email\":\"\",\"latitude\":40.765605,\"longitude\":-73.97904,\"categories\":[\"Hotels\"],\"sharingProfile\":false,\"address\":{\"id\":43,\"label\":null,\"line1\":\"153 W 57th St\",\"line2\":\"\",\"town\":\"New York\",\"county\":\"NY\",\"postcode\":\"10019\",\"country\":\"US\",\"phone\":\"\",\"latitude\":\"40.765605\",\"longitude\":\"-73.97904\"},\"photo\":{\"id\":57,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/large_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=e995f55a282fd2a6ce4271035a91ab20deceea76128b3ee60e4c1fcb43b141e1\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/medium_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=95680861779a39adcedd0b7c50e52dc0c8cedd2c538bd4a1d66808ae47a37e3a\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/square_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=179a4651788d7cf9bbc0d75b73cefff44d14014762d07608c407ad6deffebc8e\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/thumb_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=fac106dd72c2cbf8cc49f28d14ece447cc6be00c10e2c0099dd64235537307ce\"}}] POST /v1/partners/1/share Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 12481b72-4f85-4c34-b15a-78afabedd4b5 X-Runtime: 0.327847 Cache-Control: no-cache DELETE /v1/partners/1/revoke Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> DELETE /v1/partners/revoke Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 62078460-f384-4cfb-8eb0-5990c8eea40f X-Runtime: 0.044358 Cache-Control: no-cache GET /v1/categories Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Tue, 24 Oct 2017 13:46:07 GMT X-Runtime: 0.064698 Set-Cookie: _vista_platform_session=Y0VJa1NlVTNPQWIzZXdDSFNLc1RFOGlIemllMUZnaHM2dzUwSEJVNTBSNk5ob1NPU3NGVDExUkRLc2ZUcVhLS1d6NEJIbVRzL2VrcEltVGVRb3dsdXpZY0FNUjlYVDJPTU1BRlZud0Q1SGlUVFMrTVVxVWo0WVpxQ1o4Q2dML2IyUXVCaHVnVUhJOTc0Snl5K1E4YVN3PT0tLUl1OG1aWXUyVEw5RnJaRGJHaURjSWc9PQ%3D%3D--8ba94682a0d98648f7d6cb4d6d6ac3785fdc15a9; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a60e1d64-8c16-4c49-b4f3-3dcee22c7fea X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"39062c091082b7fb83083db8c4ea041b\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 4222, \"title\": \"General\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 6, \"ignored\": false, \"position\": 1, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4107, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4107/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4107/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4107/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4107/thumb_440.jpeg\" } }, { \"id\": 4213, \"title\": \"Parking\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 2, \"ignored\": false, \"position\": 2, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4104, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4104/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4104/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4104/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4104/thumb_440.jpeg\" } } ] GET /v1/questions Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Fri, 20 Oct 2017 15:10:59 GMT X-Runtime: 16.743717 Set-Cookie: _vista_platform_session=SExnWlI2czdiNmRUOHF2WkJMcThteXkyMEw2Kzliekh2RFQ1eFY5MmpINXB0ZnJMcVhYb3FqTFA4UlZwZFJTdVRWK2ptVUgvdFkrQ1kvTHBjRFVELyt4SU1VZW5DRG5pQStTdVlpZ1JnaU40M0JBZDBTUXVpUGxvci81RDRUOVlBSkl2dkNvUWQreDV1M3V0a1g0My9BPT0tLURLR0xJeHNYajJ6cWd4MU85TlF2aHc9PQ%3D%3D--a3ffad65f936408151f08d22e03ac77aff229d92; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 72c8a29e-6574-4728-8603-896b313b621d X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"521fefadcabf9349305b98d53243afd6\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 283, \"title\": \"Eos porro sequi velit.?\", \"categoryId\": 4222, \"kind\": \"time\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [] }, { \"id\": 284, \"title\": \"Error blanditiis et in et iure non laboriosam.?\", \"categoryId\": 4222, \"kind\": \"option\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [ { \"id\": 551, \"title\": \"Quia et repellat sit.\", \"description\": \"Dolores vel qui laudantium beatae eum et nemo. Explicabo inventore deserunt consequatur aut ipsam doloremque. Quo repellat fuga nobis atque. Officia vel libero. Velit non ratione sint odio enim fuga.\", \"photo\": null }, { \"id\": 550, \"title\": \"Eaque inventore aut voluptas et placeat sit.\", \"description\": \"Aspernatur hic ea voluptas quidem quos. Commodi laboriosam dolores architecto facere eum deserunt ut. Voluptates et minima exercitationem dolores enim. Tempora sed fugit omnis et.\", \"photo\": null }, { \"id\": 549, \"title\": \"Nihil aut blanditiis rerum harum animi incidunt voluptatem adipisci.\", \"description\": \"Repellendus aut autem voluptatem veniam. Suscipit enim labore dignissimos et. Occaecati dolor labore voluptas et sed.\", \"photo\": null } ] } ] GET /v1/news Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.099705 Set-Cookie: _vista_platform_session=<vista token>; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a4f77782-aa40-446d-9554-52e336b9f46c X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"657c4fa5eae94aa1fcfc41f72713078b\" Body [{\"id\":3,\"title\":\"Reprehenderit quae rerum voluptatibus consequatur molestiae.\",\"content\":\"Ut natus alias sit quas a. Nulla pariatur voluptatem esse labore explicabo ut soluta. Quaerat corrupti consequatur asperiores quam veniam animi reprehenderit. Neque et excepturi non consequatur iure dolore.\",\"publishAt\":\"2017-10-25T14:44:11.965Z\",\"headerImage\":null},{\"id\":2,\"title\":\"Consequatur architecto est quos.\",\"content\":\"Quidem voluptates numquam. Eum dolor commodi ullam ducimus voluptatem. Sint cumque aut id ut quo. Error aut dolore ut non maxime. Tempora necessitatibus debitis alias omnis ad unde.\",\"publishAt\":\"2017-10-25T14:44:01.694Z\",\"headerImage\":null},{\"id\":1,\"title\":\"In et et rerum.\",\"content\":\"Quas et voluptates qui reprehenderit. Fugit id molestiae exercitationem libero. At nihil consequatur soluta.\",\"publishAt\":\"2017-10-25T14:42:52.127Z\",\"headerImage\":null}] GET /v1/sync Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.012769 Set-Cookie: _vista_platform_session=QkdSYXI4YXVITU55SExTUWNqNzYybG5TTHZjellOUm1hVU1tVEF5QjZYcmlXVCtkY3NIZzJpekJ2czkrbVYycUlIOGFmdUJ0THMxOHViMTgyN04xV2t3WkxzYm5jUjNCY0FCcUliMWZ2OXJvQktxVndobUkyS2pmdjY5TmdwOVUwcHhzUnljSHNFd2JDaEFheGZhSjVnPT0tLUhxZjl5eVF3VEZ0SHd1c09aN3pYU0E9PQ%3D%3D--5ae00d544a9d7b536593a35d8502990225f7ef04; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 9b750da0-28fb-4fc8-91fe-888632876df6 X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"cde515396cfa9a18a4df24f4ba428ae5\" Body {\"answers\":[{\"questionId\":23,\"updatedAt\":\"2017-09-19T15:33:00.033Z\"},{\"questionId\":25,\"updatedAt\":\"2017-09-20T12:13:44.437Z\"},{\"questionId\":34,\"updatedAt\":\"2017-09-20T12:17:08.956Z\"},{\"questionId\":26,\"updatedAt\":\"2017-09-20T12:18:19.558Z\"},{\"questionId\":36,\"updatedAt\":\"2017-09-20T12:29:00.676Z\"},{\"questionId\":27,\"updatedAt\":\"2017-09-22T11:58:21.974Z\"},{\"questionId\":28,\"updatedAt\":\"2017-09-22T11:59:07.897Z\"},{\"questionId\":30,\"updatedAt\":\"2017-09-22T11:59:12.029Z\"},{\"questionId\":32,\"updatedAt\":\"2017-09-22T11:59:18.110Z\"},{\"questionId\":29,\"updatedAt\":\"2017-09-22T12:00:01.611Z\"},{\"questionId\":33,\"updatedAt\":\"2017-09-22T12:00:15.490Z\"},{\"questionId\":31,\"updatedAt\":\"2017-09-22T12:00:24.099Z\"},{\"questionId\":35,\"updatedAt\":\"2017-09-22T12:15:22.340Z\"},{\"questionId\":19,\"updatedAt\":\"2017-09-22T12:35:47.546Z\"},{\"questionId\":20,\"updatedAt\":\"2017-09-22T12:35:50.356Z\"},{\"questionId\":21,\"updatedAt\":\"2017-09-22T12:36:02.139Z\"},{\"questionId\":22,\"updatedAt\":\"2017-09-22T12:36:06.128Z\"},{\"questionId\":37,\"updatedAt\":\"2017-09-25T10:54:56.570Z\"},{\"questionId\":38,\"updatedAt\":\"2017-09-25T10:54:58.493Z\"},{\"questionId\":24,\"updatedAt\":\"2017-09-25T13:32:55.687Z\"},{\"questionId\":39,\"updatedAt\":\"2017-09-25T14:09:28.693Z\"},{\"questionId\":40,\"updatedAt\":\"2017-09-25T14:09:29.674Z\"},{\"questionId\":41,\"updatedAt\":\"2017-09-25T14:09:30.527Z\"},{\"questionId\":44,\"updatedAt\":\"2017-09-29T08:32:07.403Z\"}]} POST /v1/sync Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"update\": [ { \"questionId\": 23, \"values\": \"Online!\", \"note\": null } ], \"get\": [ 34, 26, 36 ], \"delete\": [ 24 ], \"add\": [ { \"questionId\": 24, \"values\": \"Less than $1000\" } ] } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"7a6c0435085bc365fd48af39a659c339\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 74d19483-7955-4cfd-995c-625bed55abd5 X-Runtime: 0.664534 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body [{\"id\":15,\"questionId\":34,\"values\":\"No\",\"note\":null,\"synced\":true}, {\"id\":16,\"questionId\":26,\"values\":\"Yes\",\"note\":null,\"synced\":true}, {\"id\":18,\"questionId\":36,\"values\":\"First floor\",\"note\":null \"synced\":true} ] POST /v1/categories/4222/ignore Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e30ae883-45c7-4e0b-a186-adc8347802b5 X-Runtime: 0.016333 Cache-Control: no-cache DELETE /v1/categories/4222/ignore Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: db00018d-bd1a-4621-801d-300f2bb569f6 X-Runtime: 0.014774 Cache-Control: no-cache POST /v1/password/reset Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"email\": \"foo\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: ad3bcf39-eea9-4526-9ada-85e95c1afbbc X-Runtime: 0.007599 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"detail\":\"No user found for request\"}]} PUT /v1/password/reset Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"token\": \"bad\", \"password\": \"password\", \"password_confirmation\": \"password\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4fb7572f-38c4-4a99-a033-e01466874fc6 X-Runtime: 0.013222 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":{\"token\":\"Password reset token invalid\"}}","title":"Index"},{"location":"route/#api","text":"","title":"API"},{"location":"route/#post-v1login","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"chris@kanso.io\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"5f2469bc79d1ccf2cb0554ccf3314e3c\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4014520d-7732-4bf3-8d42-8f31a1b2e3ec X-Runtime: 0.175549 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"<auth token>\",\"needsOnboarding\":false}","title":"POST /v1/login"},{"location":"route/#post-v1register","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"kathy.villeda@example.com\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"d37626fa2db73f508eb6fb5c7ce71ca3\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e7e24330-beac-48e4-abdb-3378d76fb214 X-Runtime: 0.362156 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"z89byAP37vpiouiZsPiAVmux\",\"needsOnboarding\":true}","title":"POST /v1/register"},{"location":"route/#post-v1register_1","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"test@test.com\", \"password\": \"password\" } Response 401 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 069b4a52-b0a1-4b57-831e-b1ff14ceef44 X-Runtime: 0.623524 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"source\":{\"pointer\":\"/data/attributes/email\"},\"detail\":\"Email is already taken\"}]}","title":"POST /v1/register"},{"location":"route/#get-v1me","text":"Request (application/json) Headers Accept: application/json Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.082517 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: fddcffef-bf97-43be-b16e-e143a19c2898 X-Content-Type-Options: nosniff Etag: W/\"e4675e989b64cd71d9e119f2d28a33cd\" X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 10 Oct 2017 13:45:05 GMT Body {\"id\":2,\"email\":\"chris@kanso.io\",\"firstName\":\"Chris\",\"lastName\":\"Edwards\",\"name\":\"Chris Edwards\",\"jobTitle\":\"null\",\"company\":\"null\",\"address\":\"null\",\"memberId\":\"DnMZrZ\",\"updatedAt\":\"2017-10-10T13:45:05.089Z\",\"avatar\":{\"id\":54,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/large_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=0d33cb46c3b0a49e1a1ab80097a8a84bff20149afdd39aa40256453b7035c502\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/medium_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=ab95bbbb0e5b94ea3d8ca803f33bb1ba9e4e2e4ea778f80d41921131c3053051\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/square_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=17479710095e896416fc016cff48cf1adb0b3b5123ffc629813b5de922d872c1\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/thumb_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=797ae5b7d962b92571213aeced23aca81d219d9dc55a4e47c4248b349ae1a82f\"}}","title":"GET /v1/me"},{"location":"route/#put-v1me","text":"Request (application/x-www-form-urlencoded; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body user%5Bname%5D=Chris+Edwards","title":"PUT /v1/me"},{"location":"route/#get-v1partners","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.240713 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 1519535a-24fc-4c8e-ab36-f7fba864b551 X-Content-Type-Options: nosniff Etag: W/\"9b185923d3c6d3ae7d173461a960d9f0\" X-Frame-Options: SAMEORIGIN Body [{\"id\":1,\"name\":\"Park Hyatt New York\",\"about\":\"Across the street from Carnegie Hall, this sleek hotel in Midtown is a minute's walk from 57th Street subway station and a mile from the Lincoln Centre\",\"email\":\"\",\"latitude\":40.765605,\"longitude\":-73.97904,\"categories\":[\"Hotels\"],\"sharingProfile\":false,\"address\":{\"id\":43,\"label\":null,\"line1\":\"153 W 57th St\",\"line2\":\"\",\"town\":\"New York\",\"county\":\"NY\",\"postcode\":\"10019\",\"country\":\"US\",\"phone\":\"\",\"latitude\":\"40.765605\",\"longitude\":\"-73.97904\"},\"photo\":{\"id\":57,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/large_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=e995f55a282fd2a6ce4271035a91ab20deceea76128b3ee60e4c1fcb43b141e1\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/medium_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=95680861779a39adcedd0b7c50e52dc0c8cedd2c538bd4a1d66808ae47a37e3a\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/square_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=179a4651788d7cf9bbc0d75b73cefff44d14014762d07608c407ad6deffebc8e\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/thumb_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=fac106dd72c2cbf8cc49f28d14ece447cc6be00c10e2c0099dd64235537307ce\"}}]","title":"GET /v1/partners"},{"location":"route/#post-v1partners1share","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 12481b72-4f85-4c34-b15a-78afabedd4b5 X-Runtime: 0.327847 Cache-Control: no-cache","title":"POST /v1/partners/1/share"},{"location":"route/#delete-v1partners1revoke","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token>","title":"DELETE /v1/partners/1/revoke"},{"location":"route/#delete-v1partnersrevoke","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 62078460-f384-4cfb-8eb0-5990c8eea40f X-Runtime: 0.044358 Cache-Control: no-cache","title":"DELETE /v1/partners/revoke"},{"location":"route/#get-v1categories","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Tue, 24 Oct 2017 13:46:07 GMT X-Runtime: 0.064698 Set-Cookie: _vista_platform_session=Y0VJa1NlVTNPQWIzZXdDSFNLc1RFOGlIemllMUZnaHM2dzUwSEJVNTBSNk5ob1NPU3NGVDExUkRLc2ZUcVhLS1d6NEJIbVRzL2VrcEltVGVRb3dsdXpZY0FNUjlYVDJPTU1BRlZud0Q1SGlUVFMrTVVxVWo0WVpxQ1o4Q2dML2IyUXVCaHVnVUhJOTc0Snl5K1E4YVN3PT0tLUl1OG1aWXUyVEw5RnJaRGJHaURjSWc9PQ%3D%3D--8ba94682a0d98648f7d6cb4d6d6ac3785fdc15a9; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a60e1d64-8c16-4c49-b4f3-3dcee22c7fea X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"39062c091082b7fb83083db8c4ea041b\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 4222, \"title\": \"General\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 6, \"ignored\": false, \"position\": 1, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4107, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4107/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4107/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4107/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4107/thumb_440.jpeg\" } }, { \"id\": 4213, \"title\": \"Parking\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 2, \"ignored\": false, \"position\": 2, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4104, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4104/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4104/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4104/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4104/thumb_440.jpeg\" } } ]","title":"GET /v1/categories"},{"location":"route/#get-v1questions","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Fri, 20 Oct 2017 15:10:59 GMT X-Runtime: 16.743717 Set-Cookie: _vista_platform_session=SExnWlI2czdiNmRUOHF2WkJMcThteXkyMEw2Kzliekh2RFQ1eFY5MmpINXB0ZnJMcVhYb3FqTFA4UlZwZFJTdVRWK2ptVUgvdFkrQ1kvTHBjRFVELyt4SU1VZW5DRG5pQStTdVlpZ1JnaU40M0JBZDBTUXVpUGxvci81RDRUOVlBSkl2dkNvUWQreDV1M3V0a1g0My9BPT0tLURLR0xJeHNYajJ6cWd4MU85TlF2aHc9PQ%3D%3D--a3ffad65f936408151f08d22e03ac77aff229d92; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 72c8a29e-6574-4728-8603-896b313b621d X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"521fefadcabf9349305b98d53243afd6\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 283, \"title\": \"Eos porro sequi velit.?\", \"categoryId\": 4222, \"kind\": \"time\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [] }, { \"id\": 284, \"title\": \"Error blanditiis et in et iure non laboriosam.?\", \"categoryId\": 4222, \"kind\": \"option\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [ { \"id\": 551, \"title\": \"Quia et repellat sit.\", \"description\": \"Dolores vel qui laudantium beatae eum et nemo. Explicabo inventore deserunt consequatur aut ipsam doloremque. Quo repellat fuga nobis atque. Officia vel libero. Velit non ratione sint odio enim fuga.\", \"photo\": null }, { \"id\": 550, \"title\": \"Eaque inventore aut voluptas et placeat sit.\", \"description\": \"Aspernatur hic ea voluptas quidem quos. Commodi laboriosam dolores architecto facere eum deserunt ut. Voluptates et minima exercitationem dolores enim. Tempora sed fugit omnis et.\", \"photo\": null }, { \"id\": 549, \"title\": \"Nihil aut blanditiis rerum harum animi incidunt voluptatem adipisci.\", \"description\": \"Repellendus aut autem voluptatem veniam. Suscipit enim labore dignissimos et. Occaecati dolor labore voluptas et sed.\", \"photo\": null } ] } ]","title":"GET /v1/questions"},{"location":"route/#get-v1news","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.099705 Set-Cookie: _vista_platform_session=<vista token>; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a4f77782-aa40-446d-9554-52e336b9f46c X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"657c4fa5eae94aa1fcfc41f72713078b\" Body [{\"id\":3,\"title\":\"Reprehenderit quae rerum voluptatibus consequatur molestiae.\",\"content\":\"Ut natus alias sit quas a. Nulla pariatur voluptatem esse labore explicabo ut soluta. Quaerat corrupti consequatur asperiores quam veniam animi reprehenderit. Neque et excepturi non consequatur iure dolore.\",\"publishAt\":\"2017-10-25T14:44:11.965Z\",\"headerImage\":null},{\"id\":2,\"title\":\"Consequatur architecto est quos.\",\"content\":\"Quidem voluptates numquam. Eum dolor commodi ullam ducimus voluptatem. Sint cumque aut id ut quo. Error aut dolore ut non maxime. Tempora necessitatibus debitis alias omnis ad unde.\",\"publishAt\":\"2017-10-25T14:44:01.694Z\",\"headerImage\":null},{\"id\":1,\"title\":\"In et et rerum.\",\"content\":\"Quas et voluptates qui reprehenderit. Fugit id molestiae exercitationem libero. At nihil consequatur soluta.\",\"publishAt\":\"2017-10-25T14:42:52.127Z\",\"headerImage\":null}]","title":"GET /v1/news"},{"location":"route/#get-v1sync","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.012769 Set-Cookie: _vista_platform_session=QkdSYXI4YXVITU55SExTUWNqNzYybG5TTHZjellOUm1hVU1tVEF5QjZYcmlXVCtkY3NIZzJpekJ2czkrbVYycUlIOGFmdUJ0THMxOHViMTgyN04xV2t3WkxzYm5jUjNCY0FCcUliMWZ2OXJvQktxVndobUkyS2pmdjY5TmdwOVUwcHhzUnljSHNFd2JDaEFheGZhSjVnPT0tLUhxZjl5eVF3VEZ0SHd1c09aN3pYU0E9PQ%3D%3D--5ae00d544a9d7b536593a35d8502990225f7ef04; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 9b750da0-28fb-4fc8-91fe-888632876df6 X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"cde515396cfa9a18a4df24f4ba428ae5\" Body {\"answers\":[{\"questionId\":23,\"updatedAt\":\"2017-09-19T15:33:00.033Z\"},{\"questionId\":25,\"updatedAt\":\"2017-09-20T12:13:44.437Z\"},{\"questionId\":34,\"updatedAt\":\"2017-09-20T12:17:08.956Z\"},{\"questionId\":26,\"updatedAt\":\"2017-09-20T12:18:19.558Z\"},{\"questionId\":36,\"updatedAt\":\"2017-09-20T12:29:00.676Z\"},{\"questionId\":27,\"updatedAt\":\"2017-09-22T11:58:21.974Z\"},{\"questionId\":28,\"updatedAt\":\"2017-09-22T11:59:07.897Z\"},{\"questionId\":30,\"updatedAt\":\"2017-09-22T11:59:12.029Z\"},{\"questionId\":32,\"updatedAt\":\"2017-09-22T11:59:18.110Z\"},{\"questionId\":29,\"updatedAt\":\"2017-09-22T12:00:01.611Z\"},{\"questionId\":33,\"updatedAt\":\"2017-09-22T12:00:15.490Z\"},{\"questionId\":31,\"updatedAt\":\"2017-09-22T12:00:24.099Z\"},{\"questionId\":35,\"updatedAt\":\"2017-09-22T12:15:22.340Z\"},{\"questionId\":19,\"updatedAt\":\"2017-09-22T12:35:47.546Z\"},{\"questionId\":20,\"updatedAt\":\"2017-09-22T12:35:50.356Z\"},{\"questionId\":21,\"updatedAt\":\"2017-09-22T12:36:02.139Z\"},{\"questionId\":22,\"updatedAt\":\"2017-09-22T12:36:06.128Z\"},{\"questionId\":37,\"updatedAt\":\"2017-09-25T10:54:56.570Z\"},{\"questionId\":38,\"updatedAt\":\"2017-09-25T10:54:58.493Z\"},{\"questionId\":24,\"updatedAt\":\"2017-09-25T13:32:55.687Z\"},{\"questionId\":39,\"updatedAt\":\"2017-09-25T14:09:28.693Z\"},{\"questionId\":40,\"updatedAt\":\"2017-09-25T14:09:29.674Z\"},{\"questionId\":41,\"updatedAt\":\"2017-09-25T14:09:30.527Z\"},{\"questionId\":44,\"updatedAt\":\"2017-09-29T08:32:07.403Z\"}]}","title":"GET /v1/sync"},{"location":"route/#post-v1sync","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"update\": [ { \"questionId\": 23, \"values\": \"Online!\", \"note\": null } ], \"get\": [ 34, 26, 36 ], \"delete\": [ 24 ], \"add\": [ { \"questionId\": 24, \"values\": \"Less than $1000\" } ] } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"7a6c0435085bc365fd48af39a659c339\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 74d19483-7955-4cfd-995c-625bed55abd5 X-Runtime: 0.664534 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body [{\"id\":15,\"questionId\":34,\"values\":\"No\",\"note\":null,\"synced\":true}, {\"id\":16,\"questionId\":26,\"values\":\"Yes\",\"note\":null,\"synced\":true}, {\"id\":18,\"questionId\":36,\"values\":\"First floor\",\"note\":null \"synced\":true} ]","title":"POST /v1/sync"},{"location":"route/#post-v1categories4222ignore","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e30ae883-45c7-4e0b-a186-adc8347802b5 X-Runtime: 0.016333 Cache-Control: no-cache","title":"POST /v1/categories/4222/ignore"},{"location":"route/#delete-v1categories4222ignore","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: db00018d-bd1a-4621-801d-300f2bb569f6 X-Runtime: 0.014774 Cache-Control: no-cache","title":"DELETE /v1/categories/4222/ignore"},{"location":"route/#post-v1passwordreset","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"email\": \"foo\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: ad3bcf39-eea9-4526-9ada-85e95c1afbbc X-Runtime: 0.007599 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"detail\":\"No user found for request\"}]}","title":"POST /v1/password/reset"},{"location":"route/#put-v1passwordreset","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"token\": \"bad\", \"password\": \"password\", \"password_confirmation\": \"password\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4fb7572f-38c4-4a99-a033-e01466874fc6 X-Runtime: 0.013222 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":{\"token\":\"Password reset token invalid\"}}","title":"PUT /v1/password/reset"}]}